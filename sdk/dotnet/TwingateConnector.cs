// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TwingateLabs.Twingate
{
    /// <summary>
    /// Connectors provide connectivity to Remote Networks. This resource type will create the Connector in the Twingate Admin Console, but in order to successfully deploy it, you must also generate Connector tokens that authenticate the Connector with Twingate. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/understanding-access-nodes).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Twingate = TwingateLabs.Twingate;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var awsNetwork = new Twingate.TwingateRemoteNetwork("awsNetwork", new Twingate.TwingateRemoteNetworkArgs
    ///         {
    ///         });
    ///         var awsConnector = new Twingate.TwingateConnector("awsConnector", new Twingate.TwingateConnectorArgs
    ///         {
    ///             RemoteNetworkId = awsNetwork.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import twingate:index/twingateConnector:TwingateConnector connector Q29ubmVjdG1b0qe0
    /// ```
    /// </summary>
    [TwingateResourceType("twingate:index/twingateConnector:TwingateConnector")]
    public partial class TwingateConnector : Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the Connector, if not provided one will be generated
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Remote Network to attach the Connector to
        /// </summary>
        [Output("remoteNetworkId")]
        public Output<string> RemoteNetworkId { get; private set; } = null!;


        /// <summary>
        /// Create a TwingateConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TwingateConnector(string name, TwingateConnectorArgs args, CustomResourceOptions? options = null)
            : base("twingate:index/twingateConnector:TwingateConnector", name, args ?? new TwingateConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TwingateConnector(string name, Input<string> id, TwingateConnectorState? state = null, CustomResourceOptions? options = null)
            : base("twingate:index/twingateConnector:TwingateConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TwingateConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TwingateConnector Get(string name, Input<string> id, TwingateConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new TwingateConnector(name, id, state, options);
        }
    }

    public sealed class TwingateConnectorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Connector, if not provided one will be generated
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Remote Network to attach the Connector to
        /// </summary>
        [Input("remoteNetworkId", required: true)]
        public Input<string> RemoteNetworkId { get; set; } = null!;

        public TwingateConnectorArgs()
        {
        }
    }

    public sealed class TwingateConnectorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Connector, if not provided one will be generated
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Remote Network to attach the Connector to
        /// </summary>
        [Input("remoteNetworkId")]
        public Input<string>? RemoteNetworkId { get; set; }

        public TwingateConnectorState()
        {
        }
    }
}
